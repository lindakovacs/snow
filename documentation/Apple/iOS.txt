Обзор книг
http://habrahabr.ru/post/166213/

Список тем для подписки
https://lists.apple.com/mailman/listinfo


ФРЕЙМВОРК
----------------------------------------------------------
Библиотеки на устройстве располагаются в папке /Systern/Library/Frarneworks.
В обычном режиме увидеть файловую иерархию нельзя.
Когда проект собирается и запускается на компьютере используется папка, например:
Xcode.арр/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.О.sdk.

Cocoa

UIKit - UI
Импортируется заголовком <UIKit/UIKit.h>

Foundation - NS
Импортируется заголовком <Foundation/Foundation.h>

CoreFoundation - CF
Импортируется заголовком <CoreFoundation/CoreFoundation.h>

CoreGraphics - CG

Как правило <UIKit/UIKit.h> включает <Foundation/Foundation.h> (который включает <CoreFoundation/CoreFoundation.h>)

При необходимости фреймворк подключается в проекте, например AddressBookUI.frarnework.
Начиная с версии Xcode 5 и LLVM 5.0, могут использоваться модули, см Еnаbе Modules (С and Objectlve-C).
Модули - это кешированная информация, хранящаяся на компьютере в папке Library/Developer/Xcode/DerivedData/ModuleCache.
Когда вы собираете приложение, импортирующее заголовок фреймворка, а информация об этом фреймворке не кеширована в
модуле, она моментально кешируется в модуле.

При использовании модулей директива
#import <AddressBookUI/AddressBookUI.h>
конвертируется, например в 
@import AddressBookUI;
Т.е. в коде можно оставить только последнюю запись.
Однако при использовании "модульного стиля" вы не знаете, какие фреймворки подключаются к проекту и в проекте они не видны.

nib - ФАЙЛЫ
----------------------------------------------------------
nib - "NeXTStep Interface Builder"
Почти каждое приложение для iOS содержит хотябы один nib-файл (можно сгенерить такие объекты в коде, но не целесообразно).
Этот файл генерируется либо из файла .xib, либо из файла .storyboard в проекте Xcode.
Часто nib-редактор в XCode называют Interface Builder (до версии XCode 3.2 этот редактор был отдельной программой).
Инструкции в nib-файле называются nib-объектами. Как правило, это объекты интерфейса, которые загружаются
в момент выполнения программы.

!!! В момент загрузки nib-файла все его объекты одновременно становятся экземплярами.
!!! Связи и действия могут устанавливаться только между объектами в одном nib-файле
!!! Программист может добавить свой код инициализации экземпляров объектов.
----------------------------------------------------------

Документация устанавливается в
Library/Developer/Shared/Documentation/DocSets

СЛАБАЯ СВЯЗЬ С ФРЕЙМВОРКОМ
----------------------------------------------------------
В настройках проекта возможно установить Linked Frameworks and Libraries на Optional.
С технической точки зрения это называется слабой связью с фреймворком (weak-linking the framework).

Существует возможность проверить, существует ли требуемый метод, используя метод
respondsToSelector: и вызовы объекта класса NSObj ect
if ([UIButton respondsToSelector: @selector(appearance)])
  // ok - вызыаем метод класса appearance
  } else {
  // не выэываем метод класса appearance
}

Существует возможность проверить, существует ли класс, используя функцию
NSClassFromString, которая возвращает nil, если класс не существует.

Кроме того, если используется версия Base SDK 5.0 или более поздняя и фреймворк, которому принадлежит
класс, существует или имеет слабую связь с приложением, можно послать этому классу любое сообщение
(как классу) и проверить, равен ли результат nil; этот механизм работает, потому что классы,
начиная с системы iOS 5, являются слабо связанными.
// считаем, что каркас Core Image является слабо связанным
if ([CIFilter class]) { // ok - можно работать с классом CIFilter

Проверка существования констант и функций.
Существует возможность проверить, существует ли имя константы, включая имя функции в языке С, взяв адрес имени и сравнив его с нулем.
Например:
if (&UIApplicationWillEnterForegrounc!Notification) {
// ОК - можно ссылаться на UIApplicationWillEnterForegrounc!Notification

Управnение версиями
----------------------------------------------------------
Среда Xcode имеет несколько механизмов управления версиями, основанных на системах
Git (http://git-scт.com) и Subversion (http://subversion.apache.org, которая также называется SVN)

См. http://www.lachoseinteractive.net/en/products

Если вы не хотите использовать систему управления версиями, интегрированную в среду
Xcode, можно просто ее отключить (частично или полностью). Если снять флажок Еnаble Source Control в окне настроек Source Control.
Рекомендуется оставить Еnаble source control и Refresh local status automatically, чтобы среда Xcode отображала статус файла в окне навигатора проекта.



УПРАВЛЕНИЕ ПАМЯТЬЮ
----------------------------------------------------------
iOS не использует файл подкачки и память для приложений ограничивается объемом физической памяти на устройстве.
Как правило для приложений доступна половина из имеющейся оперативной памяти.
Среда Cocoa Touch имеет API, который позволяет определить когда объем доступной памяти становится мал. когда это происходит,
приложение должно освободить ненужную память, или оно рискует быть уничтоженым. Среда Cocoa Touch не имеет механизма сборки мусора.

Контроллерам посылается сообщение (для iOS6 и выше)
didReceiveMemoryWarning
http://stackoverflow.com/questions/2430728/how-to-implement-didreceivememorywarning


ОКНА
----------------------------------------------------------
Система iOS позволяет работать приложению только с одним окном. Все взаимодействия с пользователем происходят только в этом окне, причём его размер фиксирован
и совпадает с размером экрана.

iOS существенно ограничивает возможности приложения. Вы можете читать и записывать файлы только в той части фс, которая была создана для приложения.
Эта область называется "песочницей". после запуска приложение должно быстро загрузить свои данные и открыть главное представление (main view).
В любой момент пользователь может нажать кнопку Home, и iOS откроет домашний экран. У приложения есть 5 сек, чтобы закрыться,
в противном случае оно будет уничтожено. В iOS 4 приложению может быть предоставлено дополнительное время.

http://www.macdigger.ru/iphone-ipod/mnogozadachnost-v-ios-pochemu-vy-ne-dolzhny-zakryvat-fonovye-prilozheniya-na-iphone-i-ipad.html
http://macdays.ru/iphone/multitasking-myths/
На iPhone и iPad не нужно управлять фоновыми процессами.
Когда вы нажимаете кнопку Домой, система почти во всех случаях заставляет приложение выйти и прекратить использование ресурсов процессора,
а память, которую оно занимало, со временем освобождается.


APP STATES
----------------------------------------------------------
https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/TheAppLifeCycle/TheAppLifeCycle.html  тут детальная схема переходов

Всего у приложений в iOS есть пять типов состояний:

Not running (не запущенное) — приложение не было запущено или его работа была прекращена
Inactive (неактивное) — приложение работает, но не принимает события (например, когда пользователь заблокировал телефон при запущенном приложении)
Active (активное) — нормальное состояние приложения при его работе
Background (фоновое) — приложение больше не на дисплее, но оно все еще выполняет код
Suspended (приостановленное) — приложение занимает память, но не выполняет код

Когда вы нажимаете кнопку Home, приложение перемещается из Active в Background. В течение следующих нескольких секунд большинство приложений обычно тут же переходят из состояния Background в Suspended.
Первое техническое заблуждение заключается в том, что приложения Suspended не занимают память устройства. Это не так, и поэтому их запуск происходит быстрее.
Однако они не используют мощность процессора и не сажают заряд аккумулятора.

Приложения в фоновом режиме:
Обычно многие приложения перемещаются из состояния Background в Suspended в течение нескольких секунд. Приложению может потребоваться дополнительное время на «задачу в фоновом режиме»,
о чем оно должно сообщить пользователю. Хороший пример — приложения, которым нужно загружать довольно большие файлы, вроде Instacast.
Когда приложение Instacast находится в состоянии Active, может начаться загрузка новых подкастов. Если я нажму кнопку Home на моем iPhone,
Instacast получит пять секунд, чтобы переместиться из состояния Background в Suspended. Это остановит загрузку всех подкастов, что могло бы занять 5 минут или больше.
iOS позволяет Instacast сообщить пользователю о том, что загрузка продолжится в фоновом режиме. Это предоставит приложению некоторый временной промежуток работы в фоновом режиме,
чтобы закончить загрузку подкаста. Хотя приложения могут запросить дополнительное время, это не будет продолжаться бесконечно долго. Приложение получит около 10 минут работы в фоновом режиме,
и затем оно будет принудительно завершено системой iOS. Еще раз, вам не нужно самостоятельно беспокоиться об этом.

Неограниченное время работы в фоновом режиме:
Все приложения работают в режиме Background пять секунд. Некоторые могут потребовать 10-минутное дополнительное время. Существует небольшое число приложений,
которым необходимо работать в фоновом режиме действительно долго. iOS позволяет им это.
Существует ровно пять видов приложений, которым позволена бесконечная работа в фоновом режиме в iOS5 (аудио, GPS, VOIP, Newsstand и встроенные программы (вроде Mail)):

- Приложения, воспроизводящие аудио в фоновом режиме. Хороший пример — Instacast. Когда программа Instacast заканчивает воспроизведение подкаста, она должна перейти в режим Suspended
- Приложения, отслеживающие ваше местоположение в фоновом режиме. Например, вы будете получать голосовые подсказки навигационного приложения TomTom, даже если другое приложение будет в активном режиме.
- Приложения, работающие со звонками VOIP. Если вы пользуетесь Skype на iOS, вы можете получать звонки в фоновом режиме.
- Приложения Newsstand, загружающие новый контент. Приложения, получающие непрерывные обновления из внешних источников в фоновом режиме.
- Существует некоторые встроенные в систему приложения, которые также могут бесконечно долго работать в фоновом режиме на iOS — вероятно, самым используемым из них является Mail.app.

Разработчик обязан сообщить пользователю о работе в фоновом режиме, и часть процесса модерации приложений в App Store заключается в том, чтобы проверять подобные нарушения.

Панель многозадачности показывает лишь список недавно использованных приложений, вне зависимости от того, в каком состоянии они находятся, говорит Хаскинс.
Существуют всего несколько типов приложений, которые могут работать в фоновом режиме. Среди них, аудиопроигрыватели, навигаторы, VoIP-связи и некоторые другие.

Существует несколько режимов (на ipad), которые позволяют работать программам одновременно
Slide Over
Split View


Мost state transitions are accompanied by a corresponding call to the methods of your app delegate object. These methods are your chance to respond to state changes in an appropriate way. These methods are listed below, along with a summary of how you might use them.
Большинство переходы состояний сопровождаются соответствующим вызовом к методам вашего объекта приложения делегата. Эти методы ваш шанс ответить на изменения состояния соответствующим образом. Эти методы перечислены ниже, вместе с кратким изложением того, как вы могли бы использовать их.

    application:willFinishLaunchingWithOptions:—This method is your app’s first chance to execute code at launch time. (Первый шанс вашего приложения для выполнения кода во время запуска)
    application:didFinishLaunchingWithOptions:—This method allows you to perform any final initialization before your app is displayed to the user. (Этот метод позволяет выполнить любое окончательное инициализации, прежде чем ваше приложение отображается пользователю)
    applicationDidBecomeActive:—Lets your app know that it is about to become the foreground app. Use this method for any last minute preparation. (Приложение собирается стать на переднем плане)
    applicationWillResignActive:—Lets you know that your app is transitioning away from being the foreground app. Use this method to put your app into a quiescent state. (Позволяет вы знаете, что ваше приложение переходит от того, чтобы на переднем плане приложение. Используйте этот метод, чтобы поместить ваше приложение в состоянии покоя))
    applicationDidEnterBackground:—Lets you know that your app is now running in the background and may be suspended at any time. (Ваше приложение теперь работает в фоновом режиме и может быть приостановлено в любое время)
    applicationWillEnterForeground:—Lets you know that your app is moving out of the background and back into the foreground, but that it is not yet active. (Ваше приложение перемещается из фона обратно на первый план, но он еще не активен)
    applicationWillTerminate:—Lets you know that your app is being terminated. This method is not called if your app is suspended (Ваше приложение в настоящее время завершается. Этот метод не вызывается, если ваше приложение приостановлено)
----------------------------------------------------------

The Role of View Controllers
https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/index.html#//apple_ref/doc/uid/TP40007457



