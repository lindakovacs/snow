--------------------------------------------------------------------------------------------------------------------------
Определения

Grand Central Dispatch (GCD) - библиотека, которая обеспечивает параллельное выполнение кода на многоядерных аппаратных средствах iOS и OS X.

GCD автоматически создает четыре параллельные очереди, которые являются глобальными для вашего приложения и дифференцируются только их уровнем приоритета.
Ваше приложение запрашивает эти очереди с помощью функции dispatch_get_global_queue. Поскольку эти параллельные очереди являются глобальными для вашего приложения, вам не нужно, retain and release их; эти вызовы для них игнорируются.
В OS X v10.7 и выше или iOS 4.3 и более поздних версиях можно также создать дополнительные параллельные очереди для использования в вашем собственном коде.

Используйте последовательные очереди, чтобы гарантировать, что задачи выполняются предсказуемом порядке. Как правило такие очереди используют для защиты ресурсов или синхронизации основных процессов.
Ваше приложение должно явным образом создавать и управлять последовательными очередями.

Dispatch Queues — это объекты, поддерживающие очереди задач (анонимных блоков, либо функций), и запускающие эти задачи в порядке очереди. Позволяет выполнить произвольный блок кода, как асинхронно так и синхронно по отношению к вызвавшему потоку.
Dispatch Sources — это объекты, которые позволяют регистрировать блоки или функции для их асинхронного выполнения при срабатывании определенного события.
Dispatch Groups — это объекты, позволяющие объединять задачи в группы для последующего объединения (joining). Задачи могут быть добавлены в очередь как члены группы, и затем объект группы может быть использован для ожидания завершения всех задач группы.
Dispatch Semaphores — это объекты, которые позволяют не более, чем определенному числу задач выполняться одновременно.

--------------------------------------------------------------------------------------------------------------------------
GCD Objects and Automatic Reference Counting

Когда автоматический подсчет ссылок (ARC) включен, объекты диспетчеризации автоматически retain and release так же, как и любой другой объект Objective-C.
Когда ARC не включен, используйте dispatch_retain и dispatch_release функции (или Objective-C семантику), чтобы retain and release свои объекты диспетчеризации.
You cannot use the Core Foundation retain/release functions.

--------------------------------------------------------------------------------------------------------------------------
https://developer.apple.com/library/mac/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html
Типы Dispatch Queues

Serial (tasks execute one at a time in FIFO order)
  Последовательная очередь (также известная как private dispatch queues) выполняет одну задачу за раз в том порядке, в котором они будут добавлены в очередь.
  Текущее выполнение задач работает на различных потоках (которые могут меняться от задачи к задаче), которые управляются отправкой очереди.
  Последовательные очереди часто используются для синхронизации доступа к конкретному ресурсу.
  Вы можете создать столько последовательных очередей, сколько вам нужно, и каждая очередь работает одновременно в отношении всех других очередей.

Concurrent (tasks are dequeued in FIFO order, but run concurrently and can finish in any order)
  Параллельная очередь (также известный как тип глобальной очереди отправки global dispatch queue) выполняет одну или несколько задач одновременно, но задачи все еще начанаются в порядке, в котором они были добавлены в очередь.
  Текущее выполнение задач, работает на различных потоках, которые находятся в ведении Dispatch Queue. Точное число задач, выполняющихся в данный момент является переменным и зависит от условий системы.
  Вы не можете сами создавать параллельные очереди отправки. Вместо этого, существует три глобальных очереди для одновременного использования в вашем приложении.

Main dispatch queue
  Основная очередь отправки является глобально доступной последовательной очередью, которая выполняет задачи по основным потоке приложения.
  Эта очередь работает с основным циклом приложения (если таковой имеется), чтобы чередовать выполнение задач в очереди с выполнением других источников событий, прикрепленных к основному циклу приложения.

  Основная очередь автоматически создается системой в основным потоке вашего приложения. Ваше приложение может использовать только один вызов для создания основной очереди:
  dispatch_main
  UIApplicationMain (IOS) или NSApplicationMain (OS X)
  CFRunLoopRef

--------------------------------------------------------------------------------------------------------------------------
Технологии связывания очередей  

Dispatch groups
  Группы, служат полезным механизмом синхронизации для кода, который зависит от завершения других задач.

Dispatch semaphores
  Похож на традиционный семафор, но, как правило, более эффективен. Отправка семафоров обращается к ядру, только если вызывающий поток должен быть заблокирован, поскольку семафор недоступен.
  Если семафор доступен, к ядру не обращается.

Dispatch sources
  Генерирует уведомления в ответ на конкретные типы системных событий. Вы можете использовать Dispatch sources для мониторинга событий, таких как процесс уведомления, сигналы, дескрипторы событий и т.д..
  Когда происходит событие, Dispatch sources посылает, вашей задаче код асинхронно по отношению к указанной Dispatch Queue на обработку.

--------------------------------------------------------------------------------------------------------------------------
Реализация задач с помощью блоков
см blocks.txt

--------------------------------------------------------------------------------------------------------------------------
Преимущества


--------------------------------------------------------------------------------------------------------------------------
IMPORTANT

Be careful when mixing GCD with the fork system call. It is not safe.

https://developer.apple.com/library/mac/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html
GCD is a C level API; it does not catch exceptions generated by higher level languages. Your application must catch all exceptions before returning from a block submitted to a dispatch queue.





--------------------------------------------------------------------------------------------------------------------------
https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html
About Dispatch Sources

A dispatch source is a fundamental data type that coordinates the processing of specific low-level system events. Grand Central Dispatch supports the following types of dispatch sources:
Dispatch source является основным типом данных, который координирует обработку конкретных системных событий низкого уровня. Grand Central Dispatch поддерживает следующие типы источников отправки:

  Timer dispatch sources generate periodic notifications (Генерация периодических уведомлений по таймеру)
  Signal dispatch sources notify you when a UNIX signal arrives (Уведомление о поступлении сигнала UNIX)

  Descriptor sources notify you of various file- and socket-based operations, such as:
    When data is available for reading (данные доступны для чтения)
    When it is possible to write data (данные доступны для записи)
    When files are deleted, moved, or renamed in the file system (когда файлы удалены, перемещены, переименованы в файловой системе)
    When file meta information changes (когда изменена файловая метаинформация)

  Process dispatch sources notify you of process-related events, such as (уведомления о связанных с процессами событиях):
    When a process exits (процесс завершается)
    When a process issues a fork or exec type of call (процесс создаётся)
    When a signal is delivered to the process (сигнал поступает в процесс)

  Mach port dispatch sources notify you of Mach-related events (уведомит вас о связанных с Mach-ядром событиях).
  Custom dispatch sources are ones you define and trigger yourself (вы можете определять и получать пользовательские уведомления).

A dispatch source remains attached to its dispatch queue until you cancel it explicitly (Код диспечеризации остается прикрепленным к своей очереди, пока вы не отмените его в явном виде)

--------------------------------------------------------------------------------------------------------------------------
Creating Dispatch Sources

--------------------------------------------------------------------------------------------------------------------------
